Every programming language has its own tools to give the programmer the power to perform an idea.
In this article we take C++ as the programming language and callback as idea to perform, also gmock for a way to test our code.
Callback in real life, you call someone, they can not answer at that moment for any reason, you request for a callback so that they call you in a later time.
In programming languages, the concept of 'callback function' (lets name is callMeBack())is a function which is argument of another function (lets name it func()).
As part of its body, func() will call callMeBack() sometime.
There are 2 types of callbacks, blocking ones (synchronous) and deferred ones (asynchronous). 
Difference is blocking ones are called before the caller function returns so the caller actually waits for them to finish their job. 
In C++, lambda and function pointers support the blocking/ synchronous ones. 
They can be stored, copied and invoked by a general-purpose function wrapper, std::function.

A simple example of std::fucntion below:

#include <iostream>
#include <functional>

void callMeBack(int x)
{
  std::cout << x << std::endl;
}

void func(std::function<void(int)> callback)
{
  int knownValueAtThisPoint = 11;
  callback(knownValueAtThisPoint);
}

int main() 
{
  std::function<void(int)> callLater = callMeBack;
  callLater(5);
  
  
  func(callLater);
  return 0;
}

Now, lets look into how std::function can be tested using gmock.
To mock std::function in tests, gmock provides MockFunction.
First you need to create MockFunction object, obtain a std::fucntion proxy to Call from AsStdFucntion(), 
then setup expectation on its Call method and pass the obtained proxy to the test.  

Below there is an example of the std::funciton and MockFunction in a unit test:

#include <gtest/gtest.h>
#include <gmock/gmock.h>
//---------------------------------------------------------------------------------------------------------
class User
{
public:
  User(std::function<void()> futureTask)
  : m_futureTask(futureTask)
  {
  }

  void userAction()
  {
    m_futureTask();
  }

private:
  std::function<void()> m_futureTask;
};
//---------------------------------------------------------------------------------------------------------
using ::testing::_;
using ::testing::MockFunction;

class UserTest : public ::testing::Test
{
public:
  UserTest()
  {
    m_user.reset(new User(m_mockFutureTask.AsStdFunction()));
  }

protected:
  std::unique_ptr<User> m_user;
  MockFunction<std::function<void()>> m_mockFutureTask;
};

TEST_F(UserTest, testfutureTask)
{
  EXPECT_CALL(m_mockFutureTask, Call());

  m_user->userAction();
}
//---------------------------------------------------------------------------------------------------------
int main()
{
  ::testing::InitGoogleTest();
  return RUN_ALL_TESTS();
}
//---------------------------------------------------------------------------------------------------------

This simple example shows how MockFunction can be used in a handy way to mock std::function for testing purposes.


References
[1] https://en.wikipedia.org/wiki/Callback_(computer_programming)
[2] https://en.cppreference.com/w/cpp/utility/functional/function
[3] http://google.github.io/googletest/gmock_cook_book.html#MockFunction
